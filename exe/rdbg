#!/usr/bin/env ruby

require 'optparse'

config = {
  mode: :start
}

opt = OptionParser.new do |o|
  o.banner = "#{$0} [options] -- [debuggee options]"
  o.separator ''

  o.separator 'Debug console mode:'
  o.on('-n', '--no-stop', 'Do not stop at the beggining of the script.') do
    config[:no_stop] = true
  end

  o.on('-e [COMMAND]', 'execute debug command at the beggining of the script.') do |cmd|
    config[:cmds] ||= []
    config[:cmds] << cmd
  end

  o.on('-O', '--open', 'Start debuggee with opning the debagger port.',
                       'If TCP/IP options are not given,',
                       'a UNIX domain socket will be used.') do
    config[:remote] = true
  end
  o.on('--port=[PORT]', 'Listening TCP/IP port') do |port|
    config[:port] = port
  end
  o.on('--host=[HOST]', 'Listening TCP/IP host') do |host|
    config[:host] = host
  end

  o.separator ''
  o.separator '  Debug console mode runs Ruby program with the debug console.'
  o.separator ''
  o.separator "  #{$0} target.rb foo bar                 starts like 'ruby target.rb foo bar'."
  o.separator "  #{$0} -- -r foo -e bar                  starts like 'ruby -r foo -e bar'."
  o.separator "  #{$0} -O target.rb foo bar              starts and accepts attaching with UNIX domain socket."
  o.separator "  #{$0} -O --port 1234 target.rb foo bar  starts accepts attaching with TCP/IP localhost:1234."
  o.separator "  #{$0} -O --port 1234 -- -r foo -e bar   starts accepts attaching with TCP/IP localhost:1234."

  o.separator ''
  o.separator 'Attach mode:'
  o.on('-A', '--attach', 'Attach to debuggee process.') do
    config[:mode] = :attach
  end

  o.separator ''
  o.separator '  Attach mode attaches the remote debug console to the debuggee process.'
  o.separator ''
  o.separator "  '#{$0} -A' tries to connect via UNIX domain socket."
  o.separator "  #{' ' * $0.size}            If there are multiple processes are waiting for the"
  o.separator "  #{' ' * $0.size}            debugger connection, list possible debuggee names."
  o.separator "  '#{$0} -A path' tries to connect via UNIX domain socket with given path name."
  o.separator "  '#{$0} -A port' tries to connect localhost:port via TCP/IP."
  o.separator "  '#{$0} -A host port' tris to connect host:port via TCP/IP."
end

opt.parse!(ARGV)

case config[:mode]
when :start
  require 'rbconfig'
  if config[:remote]
    if config[:port]
      ENV['RUBY_DEBUG_PORT'] = config[:port]
      ENV['RUBY_DEBUG_HOST'] = config[:host]
      start_mode = "debug/open"
    else
      start_mode = "debug/open"
    end
  else
    start_mode = "debug/run"
  end

  if cmds = config[:cmds]
    ENV['RUBY_DEBUG_PRE_COMMANDS'] = cmds.join(',,')
  end

  if config[:no_stop]
    ENV['RUBY_DEBUG_STOP_ON_LOAD'] = '0'
  end

  exec("#{RbConfig.ruby}", "-I#{File.expand_path(File.dirname(__dir__))}/lib", "-r" + start_mode, *ARGV)
when :attach
  require_relative "../lib/debug/client"
  begin
    if ARGV.empty? && config[:port]
      connect [config[:host], config[:port]].compact
    else
      connect ARGV
    end
  rescue DEBUGGER__::CommandLineOptionError
    puts opt.help
  end
else
  raise # assert
end
